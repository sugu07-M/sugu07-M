filterData() {
    // Filter the data based on selected plants, start date, and end date
    this.filter = this.changerequest.filter((item: any) =>
      this.selectedPlantIds.includes(item.plantId) && this.isWithinDateRange(item.crdate));

    this.updateChartData(); // Update chart data
  }

 isWithinDateRange(crdate: string): boolean {
    if (!this.startDate || !this.endDate) {
      return true; // If start or end date is not set, return true
    }

    const crDateObj = new Date(crdate);
    const startDateObj = new Date(this.startDate);
    const endDateObj = new Date(this.endDate);

    return crDateObj >= startDateObj && crDateObj <= endDateObj;
  }

  updateChartData() {
    const counts = {
      'Draft': 0,
      'Pending Approval': 0,
      'Approved': 0,
      'Rejected': 0,
      'Implement': 0,
      'Pending': 0,
      'Release': 0,
      'Closure': 0
    };

    // Count status occurrences within the filtered data
    this.filter.forEach(item => {
      counts[item.status.trim()]++;
    });

    // Update doughnut chart data with the counts
    this.doughnutChartData.datasets[0].data = Object.values(counts);
  }

  onSelectedItemsChange(): void {
    this.getchangerequest(); // Fetch data when plant selection changes
  }
