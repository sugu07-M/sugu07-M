Severity	Code	Description	Project	File	Line	Suppression State
Error	TS2322	(TS) Type '{ ticks: { beginAtZero: true; }; }[]' is not assignable to type '_DeepPartialObject<{ type: "linear"; } & CartesianScaleOptions & { beginAtZero: boolean; suggestedMin?: number | undefined; suggestedMax?: number | undefined; grace?: string | number | undefined; ticks: { ...; }; }> | ... 4 more ... | undefined'.
  Type '{ ticks: { beginAtZero: true; }; }[]' is not assignable to type '_DeepPartialObject<{ type: "timeseries"; } & Omit<CartesianScaleOptions, "min" | "max"> & { min: string | number; max: string | number; suggestedMin: string | number; ... 5 more ...; ticks: TimeScaleTickOptions; }>'.
    Types of property 'reverse' are incompatible.
      Type '() => { ticks: { beginAtZero: true; }; }[]' is not assignable to type 'boolean | undefined'.	D:\IT_Portal\IT-Portal\IT-Portal.UI\tsconfig.json	D:\IT_Portal\IT-Portal\IT-Portal.UI\src\app\dashboard\dashboard.component.ts	348	Active


Gettablechart() {
  const apiUrls = this.apiurl + '/ViewChangeRequest/ViewChangerequest';

  const httpOptions = {
    headers: new HttpHeaders({
      'Content-Type': 'application/json'
    })
  };

  // Define the stages you want to count
  const stagesToCount = ['Approval', 'Closure', 'Implementation', 'Initiated', 'Release'];

  // Define colors for each stage
  const stageColors: { [key: string]: string } = {
    'Approval': '#1f77b4',
    'Closure': '#ff7f0e',
    'Implementation': '#2ca02c',
    'Initiated': '#d62728',
    'Release': '#9467bd'
  };

  this.http.get(apiUrls).subscribe(
    (response: any[]) => {
      this.chartdata = response;

      // Initialize multi array
      this.multi = [];

      // Extract unique plant IDs
      const uniquePlants = [...new Set(response.map(item => item.plantId))];

      // Process data for each plant
      uniquePlants.forEach(plantId => {
        const plantData = response.filter(item => item.plantId === plantId);

        // Count occurrences for each stage for the current plant
        const stagesCount: { [key: string]: number } = {};
        stagesToCount.forEach(stage => {
          stagesCount[stage] = plantData.filter(item => item.stage.trim() === stage).length;
        });

        // Create entry for the plant in multi array
        this.multi.push({
          name: plantId,
          series: stagesToCount.map(stage => ({ name: stage, value: stagesCount[stage], color: stageColors[stage] }))
        });

        // Render chart
        this.renderChart();
      });

      console.log('multi:', this.multi);
    },
    (error) => {
      console.log("API request failed", error);
    }
  );
}

renderChart() {
  const ctx = <HTMLCanvasElement>document.getElementById('myChart');
  if (ctx) {
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: this.multi.map(item => item.name),
        datasets: this.multi[0].series.map(series => ({
          label: series.name,
          data: this.multi.map(item => item.series.find(s => s.name === series.name).value),
          backgroundColor: this.multi.map(item => item.series.find(s => s.name === series.name).color)
        }))
      },
      options: {
        scales: {
          yAxes: [{
            ticks: {
              beginAtZero: true
            }
          }]
        }
      }
    });
  }
}
