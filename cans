import { HttpClient,HttpHeaders } from '@angular/common/http';
import { Component } from '@angular/core';
import { environment } from '/IT_Portal/IT-Portal/IT-Portal.UI/src/environments/environment'
import { MatDialog } from '@angular/material/dialog';
import { IssueAssigntoComponent } from './issue-new-issue/issue-assignto/issue-assignto.component';
import { PasscrdataService } from '../../change-request/passcrdata.service';

@Component({
  selector: 'app-report-issue',
  templateUrl: './report-issue.component.html',
  styleUrl: './report-issue.component.css'
})
export class ReportIssueComponent {

  supportid: any;
  constructor(private http: HttpClient, private dialog: MatDialog, private routeservice:PasscrdataService) {
    this.routeservice.getsupportteam();
    this.supportid = this.routeservice.supporterID;
  }

  private apiurl = environment.apiurls
  isVisible = true;

  toggleVisibility() {
    this.isVisible = !this.isVisible;
  }

  ngOnInit(): void {
    this.getplant();
    this.getclassification();
    this.getcategory();
    this.getpriority();
    this.getissuelist();
    this.getsupportteams();
  }

  issuelist: any[] = [];

  getissuelist() {

    const apiUrls = this.apiurl + '/IssueList/Getissuelist'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        this.issuelist = response.filter((item: any) => item.raisedbyid === parseInt(this.supportid));
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  plantscode: any;
  categoryids: any;
  classificationid: any;
  prioritytypeid: any;
  statusfilter: any;

  plantcode: any[] = [];

  getplant() {

    const apiUrls = this.apiurl + '/Plantid'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        this.plantcode = response;
        console.log(this.plantcode)
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  classifications: any[] = [];

  getclassification() {

    const apiUrls = this.apiurl + '/Classification'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        console.log(response);
        this.classifications = response;
        console.log(this.classifications)
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  categorydata: any[] = [];

  getcategory() {
    const apiUrls = this.apiurl + '/Category'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        console.log(response);
        this.categorydata = response;
        console.log(this.categorydata)
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  prioritydata: any[] = [];
  getpriority() {

    const apiUrls = this.apiurl + '/Priority'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        console.log(response);
        this.prioritydata = response;
        console.log("Priority data test", this.prioritydata)
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  openDialog(issueId: string): void {
    const dialogRef = this.dialog.open(IssueAssigntoComponent, {
      width: '33%',
      data: { issueId: issueId }
    });

    dialogRef.afterClosed().subscribe(result => {
      console.log('The dialog was closed');
    });
  }

  //Login users

  supportteams: any[] = [];
  getsupportid: any;
  supportpersonname = '';
  firstname: any;
  middlename: any;
  lastname: any;

  getsupportteams() {
    const apiUrls = this.apiurl + '/SupportTeam'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        this.supportteams = response.filter((row: any) => row.empId === parseInt(this.supportid.trim()));
        this.getsupportid = this.supportteams[0].supportTeamId
        /*this.firstname = this.supportteams[0].firstName
        this.middlename = this.supportteams[0].middleName
        this.lastname = this.supportteams[0].lastName
        this.supportpersonname = this.firstname + this.middlename + this.lastname*/
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
    setTimeout(() => {
      this.getsupportteamassign()
    }, 1000);
    
  }

  supportteamassign: any[] = [];
  ischangeanalyst: any;
  isapprover: any;
  issupportegineer: any;
  assignedplant: any;
  getsupportteamassign() {
    debugger
    const apiUrls = this.apiurl + '/SupportteamAssigned'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        this.supportteamassign = response.filter((row: any) => row.supportTeamId === this.getsupportid);
        this.assignedplant = this.supportteamassign[0].plantId
        this.isapprover = this.supportteamassign[0].isApprover
        this.issupportegineer = this.supportteamassign[0].isSupportEngineer
        this.ischangeanalyst = this.supportteamassign[0].isChangeAnalyst
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  getthedata() {

  }
}




<app-side-bar></app-side-bar>
<app-headers></app-headers>

<div class="container-home">
  <div class="text-center">
    <h1>Issue Management</h1>
  </div>
  <div class="btn-approve">
    <button class="button-approve" [routerLink]="'/issue_new_issue'">New Issue</button>&nbsp;
   <!-- <button class="button-approve" [routerLink]="'/issue_resolution'">Resolution</button>&nbsp;-->
    <button class="button-approve" [routerLink]="'/issue_report'">Report</button>&nbsp;
  </div>
  <br />
  <br />
  <div class="card change_request_card_filter" *ngIf="isVisible">
    <div class="card-body card_body_filter">
      <div class="row filter_cr">
        <div class="col">
          <label>Plant</label><br />
          <select [(ngModel)]="plantscode" class="input-change">
            <option selected>Select-plant</option>
            <option *ngFor="let plantid of plantcode" value="{{plantid.id}}">{{plantid.code}}</option>
          </select>
        </div>
        <div class="col">
          <label>Category</label><br />
          <select [(ngModel)]="categoryids" class="input-change">
            <option selected>Select-category</option>
            <option *ngFor="let catid of categorydata" value="{{catid.itcategoryId}}">{{catid.categoryName}}</option>
          </select>
        </div>
        <div class="col">
          <label>Classifications</label><br />
          <select [(ngModel)]="classificationid" class="input-change">
            <option selected>Select-classification</option>
            <option *ngFor="let classf of classifications" value="{{classf.itclassificationId}}">{{classf.classificationName}}</option>
          </select>

        </div>
        <div class="col">
          <label>Priority</label><br />
          <select [(ngModel)]="prioritytypeid" class="input-change">
            <option selected>Select-priority</option>
            <option *ngFor="let prio of prioritydata" value="{{prio.priorityId}}">{{prio.priorityName}}</option>
          </select>
        </div>
        <div class="col">
          <label>Start Date:</label><br />
          <input class="input-change cr_date" type="date" id="fromDate" name="fromDate" required />
        </div>
        <div class="col">
          <label>End Date:</label><br />
          <input class="input-change cr_date" type="date" id="toDate" name="toDate" required />
        </div>
        <div class="col">
          <label>Status</label><br />
          <select class="input-change" [(ngModel)]="statusfilter">
            <option disabled selected>Select Status</option>
            <option>All</option>
            <option class="input-change">Draft</option>
            <option>Pending Approval</option>
            <option>Approved level1</option>
            <option>Approved level2</option>
            <option>Approved</option>
            <option>Implementation</option>
            <option>Released</option>
            <option>Closure</option>
          </select>
        </div>
      </div>
      <div class="access-checkbox">

        <!--<button *ngIf="isapprover" (click)="isassignbutton()" class="btn btn-rounded filter_button">Assigned To Me</button>&nbsp;&nbsp;&nbsp;-->
        <button class="btn btn-rounded filter_button">Filter</button>
      </div>
    </div>
  </div>
  <br />
  <div class="">
    <br />
    <br />
  </div>
  <div>
    <div class="table-wrapper">
      <table class="fl-table">
        <thead class="table-head">
          <tr class="border-bottom">
            <th>Select</th>
            <th>Issue Code</th>
            <th>Requestor</th>
            <th>Status</th>
            <th>Category</th>
            <th>Sub-Category</th>
            <th>Priority</th>
            <th>Assigned To</th>
            <th *ngIf="ischangeanalyst">Assign To</th>
            <th *ngIf="issupportegineer">Resolution</th>
            <th>Delete</th>
          </tr>
        </thead>
        <tbody>
          <tr *ngFor="let issuedata of issuelist" class="tr-body">
            <td><input type="radio"  name="one" id="one" /></td>
            <td>{{issuedata.issueCode}}</td>
            <td>{{issuedata.issuerisedby}}</td>
            <td>{{issuedata.status}}</td>
            <td>{{issuedata.categoryName}}</td>
            <td>{{issuedata.categoryType}}</td>
            <td>{{issuedata.priorityName}}</td>
            <td>{{issuedata.assignedTo ? issuedata.assignedTo : 'Not assigned'}}</td>
            <td *ngIf="ischangeanalyst"><a style="cursor:pointer;" (click)="openDialog(issuedata.issueId)"><i [ngStyle]="{'color': issuedata.assignedTo ? 'green' : 'black'}" class='fas fa-male' aria-hidden="true"></i></a></td>
            <!--<td><a href="" routerLink="/issueassign/{{issuedata.issueId}}"><i style="color:black;" class='fas fa-male' aria-hidden="true"></i></a></td>-->
            <!--<td><i class="fa fa-download" aria-hidden="true"></i></td>-->
            <td *ngIf="issupportegineer">
              <a routerLink="/issuelist/{{issuedata.issueId}}/tab"><i style="color:black;" class="fa fa-file-o" aria-hidden="true" ></i></a>
            </td>
            <td>
              <a><i  class="fa fa-trash" aria-hidden="true"></i></a>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <br />
  </div>
</div>
