        <table class="fl-table">
          <thead class="table-head">
            <tr class="border-bottom">
              <th>Status</th>
              <th *ngFor="let plantId of code">{{ plantId }}</th>
              <th>Total</th>

            </tr>
          </thead>
          <tbody>
            <tr class="tr-body" (click)="navigateToOtherComponent()">
              <td style="color:Black;font-weight:500;">Open</td>
              <td>{{ Open }}</td>
              <td>{{ opentotal }}</td>
            </tr>
             <tr class="tr-body" (click)="navigatecompleted()">
               <td  style="color:Black;font-weight:500;">Completed</td>
               <td>{{ completedCount }}</td>
               <td>{{ completedt }}</td>
</tr>
   <tr class="tr-body" (click)="navigatedraft()">
     <td  style="color:Black;font-weight:500;">Draft</td>
     <td>{{ newCount }}</td>
     <td>{{newcounttotal}}</td>
   </tr>
           
   <tr class="tr-body" (click)="navigatePending()" >
     <td  style="color:Black;font-weight:500;">Pending</td>
     <td>{{ pending }}</td>
     <td>{{pendingtotal}}</td>
   </tr>
   <tr class="tr-body" (click)="navigateApproval()">
     <td  style="color:Black;font-weight:500;">Approved</td>
     <td>{{ approved }}</td>
     <td>{{approvedtotal}}</td>
   </tr>
   <tr class="tr-body" (click)="navigateImplemented()">
     <td  style="color:Black;font-weight:500;" >Implemented</td>
     <td>{{ implementation }}</td>
     <td>{{implementtotal}}</td>
   </tr>
   <tr class="tr-body" (click)="navigateClosure()">
     <td  style="color:Black;font-weight:500;">Released</td>
     <td>{{ release }}</td>
     <td>{{releasetotal}}</td>
   </tr>
   <tr class="tr-body" (click)="navigateReleased()">
     <td  style="color:Black;font-weight:500;">Closure</td>
     <td>{{ closure }}</td>
     <td>{{closuretotal}}</td>
   </tr>
   <tr class="tr-body" (click)="navigateRejected()">
     <td  style="color:Black;font-weight:500;">Rejected</td>
     <td >{{ rejected }}</td>
     <td>{{rejectedtotal}}</td>
   </tr>
          

          </tbody>
        </table>



 getsummaryreport() {

   const apiUrls = this.apiurl + '/ViewChangeRequest/ViewChangerequest'
   const requestBody = {

   }
   const httpOptions = {
     headers: new HttpHeaders({
       'content-Type': 'application/json'
     })
   };
   this.http.get(apiUrls, requestBody).subscribe(
     (response: any) => {
       console.log(response);
       if (Array.isArray(response) && response.length > 0) {

         const uniquePlantIds = [...new Set(response.map((item: any) => item.plantId))];
         console.log("Unique plantIds:", uniquePlantIds);


         this.code = uniquePlantIds;
       } else {
         console.log("Response is not in the expected format or is empty.");
       }
     },
     (error) => {
       console.error("Post failed", error)
     }
   )
 }


 newcounttotal: number = 0;
 completedt: number = 0;
 pendingtotal: number = 0;
 rejectedtotal: number = 0;
 closuretotal: number = 0;
 releasetotal: number = 0;
 implementtotal: number = 0;
 approvedtotal: number = 0;
 opentotal: number = 0;
 getchangerequest() {

   const apiUrls = this.apiurl + '/ViewChangeRequest/ViewChangerequest';
   const requestBody = {}

   const httpOptions = {
     headers: new HttpHeaders({
       'content-Type': 'application/json'
     })
   };

   this.http.get(apiUrls, requestBody).subscribe(
     (response: any) => {
       this.changerequest = response;
       this.countStatus();
      
      
       console.log(this.changerequest)

     },

     (error) => {
       console.error("Post failed", error);
     }
   );
 }

 countStatus() {
   this.newCount = this.changerequest.filter(item => item.status.trim() === 'Draft').length;
   this.completedCount = this.changerequest.filter(item => item.status.trim() === 'Completed').length;
   this.pendingCount = this.changerequest.filter(item => item.status.trim() === 'Pending').length;
   this.Open = this.changerequest.filter(item => item.status.trim() !== 'Completed').length;
   this.approved = this.changerequest.filter(item => item.status.trim() === 'Approved').length;
   this.rejected = this.changerequest.filter(item => item.status.trim() === 'Rejected').length;
   this.implementation = this.changerequest.filter(item => item.status.trim() === 'Implemented').length;
   this.pending = this.changerequest.filter(item => item.status.trim() === 'Pending').length;
   this.release = this.changerequest.filter(item => item.status.trim() === 'Release').length;
   this.closure = this.changerequest.filter(item => item.status.trim() === 'Closure').length;

   this.newcounttotal = this.newCount;
   this.completedt= this.completedCount;
   this.pendingtotal = this.pending;
   this.rejectedtotal = this.rejected;
   this.closuretotal = this.closure;
   this.releasetotal = this.release;
   this.implementtotal = this.implementation;
   this.approvedtotal = this.approved;
   this.opentotal = this.Open;
 }
