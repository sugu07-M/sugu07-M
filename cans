 multi: any[];
 view: [number, number] = [354, 270];
 showXAxis: boolean = true;
 showYAxis: boolean = true;
 gradient: boolean = false;
 showLegend: boolean = true;
 showXAxisLabel: boolean = true;
 xAxisLabel: string = 'Total Changes';
 showYAxisLabel: boolean = true;
 yAxisLabel: string = 'Plants';
 showDataLabel = false;
 colorScheme = {
   domain: ['#005073', '189ad3	', '#1ebbd7', '#71c7ec']
 };

<ngx-charts-bar-horizontal-stacked
  [view]="view"
  [results]="multi"
  [gradient]="gradient"
  [xAxis]="showXAxis"
  [yAxis]="showYAxis"
  [showXAxisLabel]="showXAxisLabel"
  [showYAxisLabel]="showYAxisLabel"
  [xAxisLabel]="xAxisLabel"
  [yAxisLabel]="yAxisLabel"
  [showDataLabel]="showDataLabel"
  [showGridLines]="false"
  [colorScheme]="colorScheme"
  (select)="onSelect($event)" style="margin-left:2px" >


this.chartData = [
      { data: nonCompleted, label: 'Open' },
      { data: completed, label: 'Completed' }
    ];

this.prepareChartData();




Getbarchart() {
  const apiUrls = this.apiurl + '/Barchart/Getbarchart';
  

  const httpOptions = {
    headers: new HttpHeaders({
      'content-Type': 'application/json'
    })
  };

  this.http.get(apiUrls).subscribe(
    (response: any) => {
      this.chartdata = response;
     
      const completed = response.map((item: { completedIdnum: any; }) => item.completedIdnum);
      const noncompleted = response.map((item: { nonCompletedIdnum: any; }) => item.nonCompletedIdnum);
      const month = response.map((item: { crmonth: any }) => item.crmonth);
      this.updateBarChartLabels(month);

      console.log(completed),
        console.log(noncompleted)


    }, 
    (error) => {
      console.log("Post failed", error);
    }
  );
}




public barChartData = [
  { data: this.noncompleted, label: 'Open' },
  { data: this.completed, label: 'Completed' },
  console.log(this.noncompleted),
  console.log(this.completed)
  ] 
