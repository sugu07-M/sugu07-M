NG9: Property 'toggleVisibility' does not exist on type 'DashboardComponent'.

<div class="card dashboard_filter" *ngIf="isVisible" style="margin-top: 2%;">
  <div class="card-body dashboard_body_filter">
    <div class="row">
      <div class="col card_plant_filter">
        <div class="multi">
          <ng-multiselect-dropdown [settings]="dropdownSettings"
                                   [data]="dropdownList"
                                   [(ngModel)]="selectedPlantIds"
                                   (ngModelChange)="onFilterChange()">
          </ng-multiselect-dropdown>
        </div>
      </div>
      <div class="col card_plant_filter">
        <input class="input-change" type="date" required placeholder="Start Date" [(ngModel)]="startDate" (change)="onFilterChange()">
      </div>
      <div class="col card_plant_filter">
        <input class="input-change" type="date" required placeholder="End Date" [(ngModel)]="endDate" (change)="onFilterChange()">
      </div>
      <div class="col card_plant_filter">
        <button class="button-overlay" (click)="onFilterChange()">Filter</button>
      </div>
    </div>
  </div>
</div>


isVisible: boolean = true; // Assuming you have a variable to control visibility of the filter section
  dropdownSettings: any; // Assuming you have settings for the dropdown
  dropdownList: any[] = []; // Assuming you have a list of items for the dropdown

  selectedPlantIds: any[] = [];
  startDate: string;
  endDate: string;

  // Define variables to store fetched data and chart data
  changerequest: any[] = [];
  doughnutChartData: any;
 getChangeRequest(): void {
    const apiUrls = this.apiurl + '/ViewChangeRequest/ViewChangerequest';
    const queryParams = {
      startDate: this.startDate,
      endDate: this.endDate,
      plantIds: this.selectedPlantIds.join(',') // Convert array to comma-separated string
    };

    const httpOptions = {
      headers: new HttpHeaders({
        'Content-Type': 'application/json'
      }),
      params: queryParams // Pass query parameters
    };

    this.http.get(apiUrls, httpOptions).subscribe(
      (response: any) => {
        this.changerequest = response;
        this.countStatus();
      },
      (error) => {
        console.error("Data fetch failed", error);
      }
    );
  }
 onFilterChange(): void {
    this.getChangeRequest(); // Fetch data when filters change
  }
