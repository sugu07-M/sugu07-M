 getChartData() {
   const apiUrls = `${this.apiurl}/ViewChangeRequest/ViewChangerequest`;
   const httpOptions = {
     headers: new HttpHeaders({
       'Content-Type': 'application/json'
     })
   };

   // Define the stages you want to count
   const stagesToCount = ['Approval', 'Closure', 'Implementation', 'Initiated', 'Release'];

   this.http.get(apiUrls).subscribe(
     (response: any) => {
       this.chartdata = response;
       this.multi = [];

       const uniquePlants = [...new Set(response.map((item: { plantId: any; }) => item.plantId))];

       uniquePlants.forEach(plantId => {
         const plantData = response.filter((item: { plantId: any; }) => item.plantId === plantId);

         const stagesCount: { [key: string]: number } = {};
         stagesToCount.forEach(stage => {
           stagesCount[stage] = plantData.filter((item: { stage: string; }) => item.stage.trim() === stage).length;
         });

         this.multi.push({
           name: plantId,
           series: stagesToCount.map(stage => ({ name: stage, value: stagesCount[stage] }))
         });
       });

       this.chartOptions = {
         animationEnabled: true,
         exportEnabled: true,
         title: {
           text: "Change Request - Plant-wise Report",
           fontFamily: "Calibri, Arial, sans-serif"
         },
         axisX: {
           title: "Total Changes",
           reversed: true
         },
         axisY: {
           title: "Plant ID",
           prefix: "$",
           suffix: "k",
           includeZero: true
         },
         toolTip: {
           shared: true
         },
         data: this.multi
       };

       this.showChart = true; 
     },
     (error: any) => {
       console.error('Error fetching chart data:', error);
     }
   );
 }
