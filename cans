 public chartOptions: Partial<ChartOptions> = {}; // Define chartOptions

  constructor(private http: HttpClient) {
    this.Gettablechart();
  }

  Gettablechart() {
    const apiUrls = this.apiurl + '/ViewChangeRequest/ViewChangerequest';
    const httpOptions = {
      headers: new HttpHeaders({
        'Content-Type': 'application/json'
      })
    };

    const stagesToCount = ['Approval', 'Closure', 'Implementation', 'Initiated', 'Release'];

    this.http.get(apiUrls).subscribe(
      (response: any) => {
        const chartData: any[] = response;

        const multi: any[] = [];

        const uniquePlants = [...new Set(chartData.map(item => item.plantId))];

        uniquePlants.forEach(plantId => {
          const plantData = chartData.filter(item => item.plantId === plantId);

          const stagesCount: { [key: string]: number } = {};
          stagesToCount.forEach(stage => {
            stagesCount[stage] = plantData.filter(item => item.stage.trim() === stage).length;
          });

          multi.push({
            name: plantId,
            series: stagesToCount.map(stage => ({ name: stage, value: stagesCount[stage] }))
          });
        });

        this.chartOptions = {
          series: multi.map(item => ({ name: item.name, data: item.series })),
          chart: {
            type: 'bar',
            height: 350,
            stacked: true
          },
          plotOptions: {
            bar: {
              horizontal: true
            }
          },
          xaxis: {
            categories: stagesToCount,
            labels: {
              formatter: val => val + 'K'
            }
          },
          title: {
            text: 'Fiction Books Sales'
          },
          yaxis: {
            title: {
              text: undefined
            }
          },
          tooltip: {
            y: {
              formatter: val => val + 'K'
            }
          },
          fill: {
            opacity: 1
          },
          legend: {
            position: 'top',
            horizontalAlign: 'left',
            offsetX: 40
          }
        };

        console.log('chartOptions:', this.chartOptions);
      },
      error => {
        console.log("API request failed", error);
      }
    );
  }
}

interface ChartOptions {
  series: ApexAxisChartSeries[];
  chart: ApexChart;
  dataLabels?: ApexDataLabels;
  xaxis: ApexXAxis;
  plotOptions: ApexPlotOptions;
  stroke?: ApexStroke;
  title: ApexTitleSubtitle;
  yaxis: ApexYAxis;
  tooltip: ApexTooltip;
  fill: ApexFill;
  legend: ApexLegend;
}
