getChartData() {
  const apiUrls = this.apiurl + '/ViewChangeRequest/ViewChangerequest';
  let queryParams = new HttpParams();

  if (this.selectedPlantIds.length > 0 && this.startDate && this.endDate) {
    queryParams = queryParams.set('plantId', this.selectedPlantIds.map(plant => plant.id).join(','));
    queryParams = queryParams.set('crdate', this.startDate + '-' + this.endDate);
  }

  const httpOptions = {
    headers: new HttpHeaders({
      'Content-Type': 'application/json'
    }),
    params: queryParams
  };

  this.http.get(apiUrls, httpOptions).subscribe(
    (response: any) => {
      console.log('Response data:', response); // Debug logging for response data

      if (!response || response.length === 0) {
        console.error('Empty or invalid response received.');
        return;
      }

      this.chartdata = response;
      this.multi = [];

      console.log('Selected Plant IDs:', this.selectedPlantIds); // Debug logging for selected plant IDs

      this.selectedPlantIds.forEach(plant => {
        console.log('Processing data for Plant ID:', plant.id); // Debug logging for current plant ID

        const plantData = response.filter((item: any) => item.plantId === plant.id);

        console.log(`Plant ID: ${plant.id}, Plant Data:`, plantData); // Debug logging for plant data

        if (!plantData || plantData.length === 0) {
          console.error(`No data found for Plant ID: ${plant.id}`);
          return;
        }

        // Filter plantData for selected stages
        const filteredData = plantData.filter((item: any) => this.stagesToCount.includes(item.stage.trim()));

        console.log(`Filtered Data for Plant ID: ${plant.id}:`, filteredData); // Debug logging for filtered data

        if (!filteredData || filteredData.length === 0) {
          console.error(`No data found for stages in Plant ID: ${plant.id}`);
          return;
        }

        const stagesCount: { [key: string]: number } = {};
        this.stagesToCount.forEach(stage => {
          const stageCount = filteredData.filter((item: any) => item.stage.trim() === stage).length;
          console.log(`Plant ID: ${plant.id}, Stage: ${stage}, Count: ${stageCount}`);
          stagesCount[stage] = stageCount;
        });

        console.log(`Plant ID: ${plant.id}, Stages Count:`, stagesCount); // Debug logging for stages count

        const plantSeries = {
          label: plant.id.toString(), // Ensure plant ID is a string
          data: this.stagesToCount.map(stage => stagesCount[stage] || 0) // Ensure data is defined or default to 0
        };

        console.log(`Plant ID: ${plant.id}, Plant Series:`, plantSeries); // Debug logging for plant series

        this.multi.push(plantSeries);
      });

      console.log('Multi:', this.multi); // Debug logging for multi array

      // Now that multi is constructed, update chartOptions
      this.updateChartOptions();
      this.showChart = true;
    },
    (error: any) => {
      console.error('Error fetching chart data:', error);
    }
  );
}
