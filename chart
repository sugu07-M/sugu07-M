getChartData() {
    const apiUrls = this.apiurl + '/ViewChangeRequest/ViewChangerequest';
    let queryParams = new HttpParams();

    if (this.selectedPlantIds.length > 0 && this.startDate && this.endDate) {
        queryParams = queryParams.set('plantId', this.selectedPlantIds.join(','));
        queryParams = queryParams.set('crdate', this.startDate + '-' + this.endDate);
    }
    const httpOptions = {
        headers: new HttpHeaders({
            'Content-Type': 'application/json'
        }),
        params: queryParams
    };

    this.http.get(apiUrls).subscribe(
        (response: any) => {
            this.chartdata = response;
            this.multi = [];
            
            // Object to store stages count for each plant ID
            const stagesCounts: { [plantId: string]: number[] } = {};

            response.forEach((item: any) => {
                const plantId = item.plantId;
                
                if (this.selectedPlantIds.some(selectedPlant => selectedPlant.item_text === plantId)) {
                    if (!stagesCounts[plantId]) {
                        stagesCounts[plantId] = Array(this.stagesToCount.length).fill(0);
                    }
                    
                    const stageIndex = this.stagesToCount.indexOf(item.stage.trim());
                    
                    if (stageIndex !== -1) {
                        stagesCounts[plantId][stageIndex]++;
                    }
                }
            });

            // Populate multi array from stagesCounts object
            for (const plantId in stagesCounts) {
                if (stagesCounts.hasOwnProperty(plantId)) {
                    this.multi.push({
                        label: plantId,
                        data: stagesCounts[plantId]
                    });
                }
            }

            this.updateChartOptions();
            this.showChart = true;
        },
        (error: any) => {
            console.error('Error fetching chart data:', error);
        }
    );
}
