getplanttable() {
  // Check if no plant IDs are selected
  if (this.selectedPlantIds.length === 0) {
    console.log('No plant IDs selected.');
    // You can display a message to the user or handle this case as needed
    return;
  }

  const apiUrls = this.apiurl + '/ViewChangeRequest/ViewChangerequest';
  let queryParams = new HttpParams();

  // Proceed with API call only if plant IDs are selected
  if (this.selectedPlantIds.length > 0 && this.startDate && this.endDate) {
    queryParams = queryParams.set('plantId', this.selectedPlantIds.join(','));
    queryParams = queryParams.set('crdate', this.startDate + '-' + this.endDate);
  }

  const httpOptions = {
    headers: new HttpHeaders({
      'Content-Type': 'application/json'
    }),
    params: queryParams
  };

  this.http.get(apiUrls, httpOptions).subscribe(
    (response: any) => {
      console.log('Response:', response); // Log the response data
      this.chartdata = response;
      this.multi = [];

      // Filter the response data for the selected plantIds
      const filteredResponse = response.filter((item: { plantId: string }) => this.selectedPlantIds.includes(item.plantId));
      console.log('Filtered Response:', filteredResponse); // Log the filtered response data

      this.selectedPlantIds.forEach(selectedPlantId => {
        const plantData = filteredResponse.filter((item: { plantId: any; }) => item.plantId === selectedPlantId);
        console.log('Plant Data for', selectedPlantId, ':', plantData); // Log the plant data for each selected plant ID

        const stagesCount: { [key: string]: number } = {};
        this.stagesToCount.forEach(stage => {
          // Count the occurrences of the stage for the current plantId
          stagesCount[stage] = plantData.filter((item: { stage: string; }) => item.stage.trim() === stage).length;
        });

        console.log('Stages Count for', selectedPlantId, ':', stagesCount); // Log the stages count for each selected plant ID

        const plantSeries = {
          label: selectedPlantId,
          data: this.stagesToCount.map(stage => stagesCount[stage])
        };

        console.log('Plant Series for', selectedPlantId, ':', plantSeries); // Log the plant series for each selected plant ID

        this.multi.push(plantSeries);
      });

      console.log('Multi:', this.multi); // Log the multi array

      this.updateOptions(); // Update chart options after processing data
      this.showChart = true; // Set showChart to true to display the chart
    },
    (error: any) => {
      console.error('Error fetching chart data:', error);
    }
  );
}
