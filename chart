
  getChartData(selectedPlantIds: string[]) {
    const apiUrls = this.apiurl + '/ViewChangeRequest/ViewChangerequest';
    let queryParams = new HttpParams();

    if (selectedPlantIds.length > 0 && this.startDate && this.endDate) {
      queryParams = queryParams.set('plantId', selectedPlantIds.join(','));
      queryParams = queryParams.set('crdate', this.startDate + '-' + this.endDate);
    }

    const httpOptions = {
      headers: new HttpHeaders({
        'Content-Type': 'application/json'
      }),
      params: queryParams
    };

    this.http.get(apiUrls, httpOptions).subscribe(
      (response: any) => {
        this.chartdata = response;
        this.multi = [];

        // Filter the response data for the selected plantIds
        const filteredResponse = response.filter((item: { plantId: string }) => selectedPlantIds.includes(item.plantId));

        selectedPlantIds.forEach(selectedPlantId => {
          const plantData = filteredResponse.filter((item: { plantId: any; }) => item.plantId === selectedPlantId);

          const stagesCount: { [key: string]: number } = {};
          this.stagesToCount.forEach(stage => {
            // Count the occurrences of the stage for the current plantId
            stagesCount[stage] = plantData.filter((item: { stage: string; }) => item.stage.trim() === stage).length;
          });

          const plantSeries = {
            label: selectedPlantId,
            data: this.stagesToCount.map(stage => stagesCount[stage])
          };

          this.multi.push(plantSeries);
        });

        this.updateChartOptions();
        this.showChart = true;
      },
      (error: any) => {
        console.error('Error fetching chart data:', error);
      }
    );
  }
updateChartOptions() {
  console.log('Multi Data:', this.multi); // Log the data to check if it's populated correctly
  console.log('Stages to Count:', this.stagesToCount); // Log the stages to count

  this.chartOptions = {
    animationEnabled: true,
    exportEnabled: false,
    data: this.multi.map((plantSeries, index) => ({
      type: "stackedBar",
      name: plantSeries.label,
      showInLegend: true,
      color: this.getRandomColor(index),
      dataPoints: this.stagesToCount.map((stage, stageIndex) => ({
        y: plantSeries.data[stageIndex] || 0, // Access count for the stage or default to 0 if undefined
        label: stage
      }))
    })),
    axisX: {
      title: "Stages"
    },
    axisY: {
      title: "Total Changes",
      gridThickness: 0,
      includeZero: true
    },
    toolTip: {
      shared: true
    },
    legend: {
      dockInsidePlotArea: false,
      horizontalAlign: "center",
      verticalAlign: "top"
    }
  };

  console.log('Chart Options:', this.chartOptions); // Log the chart options to check if they're configured correctly
}
