<div class="chart-graph">
  <h6 style="text-align: center;  color: #6c757D; font-size: 19px; font-family: poppins sens-serif;">Change Request Monthly Views</h6>
  &nbsp;
  <canvas baseChart [datasets]="barChartData"
          [labels]="barChartLabels" [options]="barChartOptions"
          [legend]="barChartLegend"
          (chartClick)="chartClicked($event)"
          style="display: block;
    box-sizing: border-box;
    height: 317px;
    width: 340px;
">
  </canvas>

</div>

<!--donut-->
<div class="dount-chart">
  <h6 style="text-align: center;  color: #6c757D; font-size: 19px; font-family: poppins sens-serif;">Change Request-OverAll View</h6>
  <canvas baseChart
          [data]="doughnutChartData"
          [labels]="doughnutChartLabels"
          [type]="doughnutChartType"
          (chartHover)="chartHovered($event)"
          (chartClick)="chartClicked($event)"
          style=" box-sizing: border-box;"></canvas>
</div>
<br>

<!--table chat-->
<div class="status-chart">
  <h6 style="text-align: center; margin-bottom: -4%; color: #6c757D; font-size: 19px; font-family: poppins sens-serif;">Change Request-Plant Wise View</h6>


  <div class="box-color" style="margin-top:8%;">
    <div class="row" style="margin-left:0%">
      <div class="col"><div class="box-color1"></div></div>
      <div class="col"><p style="margin-left:-47%;font-size:12px;">Approval</p></div>
      <div class="col"><div class="box-color2"></div></div>
      <div class="col"><p style=" margin-left: -151%; font-size: 12px;">Closure</p></div>
      <div class="col"><div class="box-color3"></div></div>
      <div class="col"><p style=" margin-left:65%;margin-top:-9%; display: block;font-size: 12px;">Implementation</p></div>
    </div>
    <div class="row" style="margin-inline:16%;margin-top:-3%">
      <div class="col"><div class="box-color4"></div></div>
      <div class="col"><p style="margin-left: -14%; font-size: 12px;">Initiated</p></div>
      <div class="col"><div class="box-color5"></div></div>
      <div class="col"><p style="margin-left: -88%; font-size: 12px;">Release</p></div>
    </div>
  </div>
  <ngx-charts-bar-horizontal-stacked [view]="view"
                                     [results]="multi"
                                     [gradient]="gradient"
                                     [xAxis]="showXAxis"
                                     [yAxis]="showYAxis"
                                     [showXAxisLabel]="showXAxisLabel"
                                     [showYAxisLabel]="showYAxisLabel"
                                     [xAxisLabel]="xAxisLabel"
                                     [yAxisLabel]="yAxisLabel"
                                     [showDataLabel]="showDataLabel"
                                     [showGridLines]="false"
                                     (select)="onSelect($event)" style="margin-left:2px">

  </ngx-charts-bar-horizontal-stacked>
</div>



typescript
  -------
  import { HttpClient,HttpHeaders } from '@angular/common/http';
import { Component, OnInit,viewChild } from '@angular/core';
import { environment } from '/IT-Portal/IT-Portal/IT-Portal.UI/src/environments/environment';
import * as Chart from 'chart.js';
import { Color } from '@swimlane/ngx-charts';
import { ChartData,ChartDataset, ChartType, ChartOptions } from 'chart.js';

import { PasscrdataService } from '../change-request/passcrdata.service';
import { ActivatedRoute } from '@angular/router';



@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrl: './dashboard.component.css',
})

export class DashboardComponent implements OnInit {



  constructor(private http: HttpClient, private routeservice: PasscrdataService, private route: ActivatedRoute) {
   
}

  private apiurl = environment.apiurls
  
  single: any;
  ngOnInit(): void {
    this.getchangerequest();
    this.Getbarchart();
    this.Gettablechart();
    this.employeeid();
    
  }

  idofemployee: any;
  employeeid() {
    this.route.params.subscribe(params => {
      this.idofemployee = params['this.rollNumber'];
      console.log("id from link",this.idofemployee)
      this.routeservice.doSomethingWithRollNumber(this.idofemployee);
    });
  }

  openNav() {
    const mySidenav = document.getElementById('mySidenav');
    if (mySidenav) {
      mySidenav.style.width = '250px';
    }
  }

  closeNav() {
    const mySidenav = document.getElementById('mySidenav');
    if (mySidenav) {
      mySidenav.style.width = '0';
    }
  }
  // Filter
  isVisible = false;

  toggleVisibility() {
    this.isVisible = !this.isVisible;
  }

  // Charts

  //API Call for change request
  changerequest: any[] = [];
  newCount: number = 0;
  completedCount: number = 0;
  pendingCount: number = 0;
  pendingApproval: number = 0;
  Approved: number = 0;
  Rejected: number = 0;
  Implemention: number = 0;
  pending: number = 0;
  release: number = 0;
  Closure: number = 0;
  
  getchangerequest() {
     
    const apiUrls = this.apiurl + '/ViewChangeRequest/ViewChangerequest';
    const requestBody = {}

    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };

    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        this.changerequest = response;
        this.countStatus();
       
      },
       
      (error) => {
        console.error("Post failed", error);
      }
    );
  }
  public doughnutChartData: ChartData<any, any[], string> = {
    labels: [],
    datasets: [
      {
        data: [],
        label: 'Status Counts',
        backgroundColor: []
      }
    ]
  };
  countStatus() {
    this.newCount = this.changerequest.filter(item => item.status.trim() === 'Draft').length;
    this.completedCount = this.changerequest.filter(item => item.status.trim() === 'Completed').length;
    this.pendingCount = this.changerequest.filter(item => item.status.trim() !== 'Completed' && item.status.trim() !== 'Draft').length;
    this.pendingApproval = this.changerequest.filter(item => item.status.trim() === 'Pending Approval').length;
    this.Approved = this.changerequest.filter(item => item.status.trim() === 'Approved').length;
    this.Rejected = this.changerequest.filter(item => item.status.trim() === 'Rejected').length;
    this.Implemention = this.changerequest.filter(item => item.status.trim() === 'Implement').length;
    this.pending = this.changerequest.filter(item => item.status.trim() === 'Pending').length;
    this.release = this.changerequest.filter(item => item.status.trim() === 'Release').length;

    this.doughnutChartData = {
      labels: ['Draft', 'Pending Approval', 'Approved', 'Rejected', 'Implementation', 'Pending', 'Release', 'Closure'],
      datasets: [
        {
          data: [
            this.newCount,
            this.pendingApproval,
            this.Approved,
            this.Rejected,
            this.Implemention,
            this.pending,
            this.release,
            this.completedCount
          ],
          label: 'Status Counts',
          backgroundColor: ['#3B71CA', '#808080ff', '#14A44D', '#DC4C64', '#54B4D3', '#E4A11B', '#b5eb49', '#808080ff']
        }
      ]
    };
  
    
    
  };

  

  // DoughnutChart

  public doughnutChartLabels: string[] = ['Draft', 'Pending Approval', 'Approved', 'Rejected', 'Implementation', 'Pending', 'Release', 'Closure'];
  
  public doughnutChartType: ChartType = 'doughnut';

  public chartHovered(e: any): void {
    // console.log(e);
  }






  getdata() {
    alert(this.pendingCount)
    /*console.log("getting data", this.changerequest)*/
  }

  /*getdata() {
    alert("completed "+this.completedCount)
  }*/
  chartdata: any;
  completed: any[]=[];
  noncompleted: any[]=[];
  month: any[] = [];
  barchartdata: any[] = [];
  barChartLabels: string[] = [];
  
  Getbarchart() {
    const apiUrls = this.apiurl + '/Barchart/Getbarchart';
    

    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };

    this.http.get(apiUrls).subscribe(
      (response: any) => {
        this.chartdata = response;

        this.completed = response.map((item: { completedIdnum: any; }) => item.completedIdnum);
        this.noncompleted = response.map((item: { nonCompletedIdnum: any; }) => item.nonCompletedIdnum);
        const month = response.map((item: { crmonth: any }) => item.crmonth);
        this.updateBarChartLabels(month);
        this.updateBarChartData(month)
 
      }, 
      (error) => {
        console.log("Post failed", error);
      }
    );
  }


  /*Chart tabs*/
  public barChartOptions: any = {
    
    responsive: true
  };
  /*public barChartLabels = this.updateBarChartLabels(this.month);*/
  public barChartType: Chart.ChartType = 'bar';
  public barChartLegend = true;
  public barChartPlugins = [];
  public barChartData = [
    { data: this.noncompleted, label: 'Open' },
    { data: this.completed, label: 'Completed' },
   
   ] 

  // events
  public chartClicked(e: any): void {
    // console.log(e);
  }

  updateBarChartData(month: number[]) {
   
    this.barChartData = [
      { data: this.noncompleted, label: 'Open' },
      { data: this.completed, label: 'Completed' }
    ];

   /* Update chart labels*/
    this.updateBarChartLabels(month);
  }
  updateBarChartLabels(month: number[]) {
  
    this.barChartLabels = month.map(month => this.getMonthName(month));
  }
  getMonthName(month: number): string {
    const monthNames = ["January", "Feb", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    return monthNames[month - 1];
  }


  


  /*tablechart*/
  plant: any;
  approval: any[] = [];
  closure: any[] = [];
  implementation: any[] = [];
  initiated: any[] = [];
  Release:any[]=[];
  Gettablechart() {
    const apiUrls = this.apiurl + '/ViewChangeRequest/ViewChangerequest';

    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };

    this.http.get(apiUrls).subscribe(
      (response: any) => {
        this.chartdata = response;
        this.approval = response.filter((item: { stage: string; }) => item.stage.trim() === 'Approval').length;
        this.closure = response.filter((item: { stage: string; }) => item.stage.trim() === 'Closure').length;
        this.implementation = response.filter((item: { stage: string; }) => item.stage.trim() === 'Implementation').length;
        this.initiated = response.filter((item: { stage: string; }) => item.stage.trim() === 'Initiated').length;
        this.Release = response.filter((item: { stage: string; }) => item.stage.trim() === 'Release').length;
        this.plant = response.map((item: { plantId: any }) => item.plantId);
      

        // Create multi array
        this.multi = this.plant.map((plantId: any) => {
          const name = plantId.split(' ')[0];
          return {
            name: name,
            series: [
              { name: 'Approval', value: this.approval },
              { name: 'Closure', value: this.closure },
              { name: 'Implementation', value: this.implementation },
              { name: 'Initiated', value: this.initiated },
              { name: 'Release', value: this.Release }
            ]
          };
        
        });
        

        // Merge with existing data in this.multi
        this.multi.forEach((item, index) => {
          const existingItemIndex = this.multi.findIndex((el) => el.name === item.name);
          if (existingItemIndex !== -1) {
            this.multi[existingItemIndex] = { ...item, series: this.multi[existingItemIndex].series };
          } else {
            this.multi.push({
              name: item.name,
              series: [
                { name: 'Approval', value: this.approval },
                { name:'Closure', value:this.closure },
                { name:'Implementation',value:this.implementation },
                { name:'Initiated',value:this.initiated },
                { name:'Release',value:this.Release }]
            });
          }
        });

        console.log('multi:', this.multi);
      },
      (error) => {
        console.log("Post failed", error);
      }
    );
  }


  /*table chart*/
  multi: any[]=[];
  view: [number, number] = [350, 270];
  
  showXAxis: boolean = true;
  showYAxis: boolean = true;
  gradient: boolean = false;
  showLegend: boolean = false;
  showXAxisLabel: boolean = true;
  xAxisLabel: string = 'Total Changes';
  showYAxisLabel: boolean = true;
  yAxisLabel: string = 'Plants';
  showDataLabel = false;
  colorScheme!: {
    domain: ['#14A44D', '#808080ff', '#54B4D3','#DC4C64','#b5eb49'];
    };


  onSelect(event: any) {
    console.log(event);
  }

  axisFormat(val: any) {
    return val;
  }

  


  

}



  
