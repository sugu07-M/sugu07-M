getChartData() {
  const apiUrls = this.apiurl + '/ViewChangeRequest/ViewChangerequest';
  let queryParams = new HttpParams();

  if (this.selectedPlantIds.length > 0 && this.startDate && this.endDate) {
    queryParams = queryParams.set('plantId', this.selectedPlantIds.join(','));
    queryParams = queryParams.set('crdate', this.startDate + '-' + this.endDate);
  }

  const httpOptions = {
    headers: new HttpHeaders({
      'Content-Type': 'application/json'
    }),
    params: queryParams
  };

  this.http.get(apiUrls, httpOptions).subscribe(
    (response: any) => {
      console.log('Response data:', response); // Debug logging for response data

      this.chartdata = response;
      this.multi = [];

      this.selectedPlantIds.forEach(plantId => {
        const plantData = response.filter((item: any) => item.plantId === plantId);

        const stagesCount: { [key: string]: number } = {};
        this.stagesToCount.forEach(stage => {
          stagesCount[stage] = plantData.filter((item: any) => item.stage.trim() === stage).length;
        });

        const plantSeries = {
          label: plantId,
          data: this.stagesToCount.map(stage => stagesCount[stage])
        };

        this.multi.push(plantSeries);
      });

      // Now that multi is constructed, update chartOptions
      this.updateChartOptions();
      this.showChart = true;
    },
    (error: any) => {
      console.error('Error fetching chart data:', error);
    }
  );
}
