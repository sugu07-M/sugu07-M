 <div class="col card_plant_filter">
   <label for="startDate">Start Date:</label>
   <input class="input-change" type="date" required placeholder="Start Date" [(ngModel)]="startDate">
 </div>
 <div class="col card_plant_filter">
   <label for="endDate">End Date:</label>
   <input class="input-change" type="date" required placeholder="End Date" [(ngModel)]="endDate">
 </div>
 <div class="col card_plant_filter">
   <button class="button-overlay" (click)="onFilterChange()">Filter</button>
 </div>



 getChangeRequest() {
   const apiUrls = this.apiurl + '/ViewChangeRequest/ViewChangerequest';
   let queryParams = new HttpParams();

   if (this.selectedPlantIds.length > 0 && this.startDate && this.endDate) {
     queryParams = queryParams.set('plantId', this.selectedPlantIds.join(','));
     queryParams = queryParams.set('crdate', this.startDate + '-' + this.endDate);
   }

   const httpOptions = {
     headers: new HttpHeaders({
       'content-Type': 'application/json'
     }),
     params: queryParams
   };

   this.http.get(apiUrls, httpOptions).subscribe(
     (response: any) => {
       this.changerequest = response;

       this.filter = this.changerequest.filter((item: any) => {

         const selectedPlantIds = this.selectedPlantIds.map(plant => plant.item_text);

         const isIncluded = selectedPlantIds.includes(item.plantId);

         return isIncluded;
       });
       

    
       this.countStatus();
       if (this.startDate != '') {

         this.filter = this.filter.filter((item: any) => item.crdate > this.startDate && item.crdate <= this.endDate)

         /*    alert('in post cond' + this.startDate + 'enddt' + this.endDate + 'len' + this.filter.length);*/
       }
     },
     (error: any) => {
       console.error('Fetching change request data failed', error);
     }
   );

 }
 countStatus() {
   this.newCount = this.filter.filter(item => item.status.trim() === 'Draft').length;
   this.completedCount = this.filter.filter(item => item.status.trim() === 'Completed').length;
   this.pendingCount = this.filter.filter(item => item.status.trim() !== 'Completed' && item.status.trim() !== 'Draft').length;
   this.pendingApproval = this.filter.filter(item => item.status.trim() === 'Pending Approval').length;
   this.Approved = this.filter.filter(item => item.status.trim() === 'Approved').length;
   this.Rejected = this.filter.filter(item => item.status.trim() === 'Rejected').length;
   this.Implemention = this.filter.filter(item => item.status.trim() === 'Implement').length;
   this.pending = this.filter.filter(item => item.status.trim() === 'Pending').length;
   this.release = this.filter.filter(item => item.status.trim() === 'Release').length;

   this.doughnutChartData = {
     labels: ['Draft', 'Pending Approval', 'Approved', 'Rejected', 'Implementation', 'Pending', 'Release', 'Closure'],
     datasets: [
       {
         data: [
           this.newCount,
           this.pendingApproval,
           this.Approved,
           this.Rejected,
           this.Implemention,
           this.pending,
           this.release,
           this.completedCount
         ],
         label: 'Status Counts',
         backgroundColor: ['#3B71CA', '#808080ff', '#14A44D', '#DC4C64', '#54B4D3', '#E4A11B', '#b5eb49', '#808080ff']
       }
     ]
   };

 };
