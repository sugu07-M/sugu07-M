 <ngx-charts-bar-horizontal-stacked [view]="view"
                                    [results]="multi"
                                    [gradient]="gradient"
                                    [xAxis]="showXAxis"
                                    [yAxis]="showYAxis"
                                    [legend]="showLegend"
                                    [showXAxisLabel]="showXAxisLabel"
                                    [showYAxisLabel]="showYAxisLabel"
                                    [xAxisLabel]="xAxisLabel"
                                    [yAxisLabel]="yAxisLabel"
                                    [showDataLabel]="showDataLabel"
                                    [showGridLines]="false"
                                    (select)="onSelect($event)" style="margin-left: 2px; display: flex; flex-direction: column;">

 </ngx-charts-bar-horizontal-stacked>

Gettablechart() {
   const apiUrls = this.apiurl + '/ViewChangeRequest/ViewChangerequest';

   const httpOptions = {
     headers: new HttpHeaders({
       'Content-Type': 'application/json'
     })
   };

   // Define the stages you want to count
   const stagesToCount = ['Approval', 'Closure', 'Implementation', 'Initiated', 'Release'];

   this.http.get(apiUrls).subscribe(
     (response: any) => {
       this.chartdata = response;

       
       this.multi = [];

      
       const uniquePlants = [...new Set(response.map((item: { plantId: any; }) => item.plantId))];

       
       uniquePlants.forEach(plantId => {
         const plantData = response.filter((item: { plantId: unknown; }) => item.plantId === plantId);

         
         const stagesCount: { [key: string]: number } = {};
         stagesToCount.forEach(stage => {
           stagesCount[stage] = plantData.filter((item: { stage: string; }) => item.stage.trim() === stage).length;
         });

         this.multi.push({
           name: plantId,
           series: stagesToCount.map(stage => ({ name: stage, value: stagesCount[stage] }))
         });
       });

       console.log('multi:', this.multi);
     },
     (error) => {
       console.log("API request failed", error);
     }
   );
 }
 label: `${stage}: ${stagesCount[stage]}`, // Label for each bar segment
              color: this.getColor(index) // Custom color for each stage

 getColor(index: number): string {
    const colors = ['#2196F3', '#4CAF50', '#FFC107', '#FF5722', '#9C27B0']; // Add more colors if needed
    return colors[index % colors.length];
  }


 multi: any[]=[];
 view: [number, number] = [350, 270];

 showXAxis: boolean = true;
 showYAxis: boolean = true;
 gradient: boolean = false;
 showLegend: boolean = false;
 showXAxisLabel: boolean = true;
 xAxisLabel: string = 'Total Changes';
 showYAxisLabel: boolean = true;
 yAxisLabel: string = 'Plants';
 showDataLabel = false;
 colorScheme!: {
   domain: ['#14A44D', '#808080ff', '#54B4D3', '#DC4C64', '#b5eb49'];
 };


 onSelect(event: any) {
   console.log(event);
 }

 axisFormat(val: any) {
   return val;
 }

