npm install chartjs-plugin-datalabels
yarn add chartjs-plugin-datalabels

import * as pluginDataLabels from 'chartjs-plugin-datalabels';


 [datasets]="barChartData"
          [labels]="barChartLabels"
          [options]="barChartOptions"
          [plugins]="barChartPlugins"
          [legend]="barChartLegend"
          [chartType]="barChartType">


  // Define your properties
  chartdata: any;
  completed: any[] = [];
  noncompleted: any[] = [];
  month: any[] = [];
  barChartLabels: string[] = [];
  barChartData: any[] = [];
  barChartPlugins = [pluginDataLabels];

  constructor(private http: HttpClient) {}

  // Call this function to fetch data and update the chart
  getBarchart() {
    const apiUrls = this.apiurl + '/Barchart/Getbarchart';

    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };

    this.http.get(apiUrls).subscribe(
      (response: any) => {
        this.chartdata = response;

        // Extracting data
        this.completed = response.map((item: { completedIdnum: any; }) => item.completedIdnum);
        this.noncompleted = response.map((item: { nonCompletedIdnum: any; }) => item.nonCompletedIdnum);
        const month = response.map((item: { crmonth: any }) => item.crmonth);

        // Update chart data and labels
        this.updateBarChartLabels(month);
        this.updateBarChartData();

      }, 
      (error) => {
        console.log("Post failed", error);
      }
    );
  }

  // Update chart data
  updateBarChartData() {
    this.barChartData = [
      { data: this.noncompleted, label: 'Open' },
      { data: this.completed, label: 'Completed' }
    ];
  }

  // Update chart labels
  updateBarChartLabels(month: number[]) {
    this.barChartLabels = month.map(month => this.getMonthName(month));
  }

  // Convert month number to month name
  getMonthName(month: number): string {
    const monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    return monthNames[month - 1];
  }

  // Chart options
  public barChartOptions: any = {
    responsive: true,
    plugins: {
      datalabels: {
        anchor: 'end',
        align: 'end',
        formatter: Math.round // You can customize the formatter function as needed
      }
    }
  };

  // Chart type
  public barChartType: Chart.ChartType = 'bar';

  // Chart legend
  public barChartLegend = true;
}
