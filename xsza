// EmployeeMasterRepository.cs
using IT_Portal.Persistence.IT_Models;
using IT_Portal.Application.Contracts.Persistence;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace IT_Portal.Persistence.Repositories
{
    public class EmployeeMasterRepository : IEmployeeMasters
    {
        private readonly MicroLabsDevContext _context;

        public EmployeeMasterRepository(MicroLabsDevContext context)
        {
            this._context = context;
        }

        // Streaming method
        public async IAsyncEnumerable<EmployeeMaster> StreamEmployeeMaster()
        {
            await foreach (var item in _context.EmployeeMasters.AsAsyncEnumerable())
            {
                yield return item;
            }
        }
    }
}


controller

// EmployeeMastersController.cs
using IT_Portal.Persistence.Repositories;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace IT_Portal.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EmployeeMastersController : ControllerBase
    {
        private readonly EmployeeMasterRepository _repository;

        public EmployeeMastersController(EmployeeMasterRepository repository)
        {
            this._repository = repository;
        }

        [HttpGet]
        public async Task<IActionResult> GetEmployee()
        {
            var employees = new List<EmployeeMaster>();

            await foreach (var item in _repository.StreamEmployeeMaster())
            {
                employees.Add(item);
            }

            return Ok(employees);
        }
    }
}
