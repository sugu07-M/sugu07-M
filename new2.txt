import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Component, EnvironmentInjector } from '@angular/core';
import { NgForm } from '@angular/forms';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { environment } from '/It_Portal/IT-Portal/IT-Portal.UI/src/environments/environment';
import { PasscrdataService } from '../passcrdata.service';

@Component({
  selector: 'app-new-change-request',
  templateUrl: './new-change-request.component.html',
  styleUrl: './new-change-request.component.css'
})
export class NewChangeRequestComponent {
  showInitiator: boolean = false;
  showRiskQ: boolean = false;
  supportid: any;
  supportname: any;
  constructor(private http: HttpClient, private routeservice: PasscrdataService, private route: Router) {
    this.routeservice.getsupportteam();
    this.supportid = this.routeservice.supporterID;
    this.supportname = this.routeservice.supporterName;
  }

  private apiurl = environment.apiurls
  private user = environment.username

  ngOnInit(): void {
    this.getclassification();
    this.getcategory();
    this.getnature();
    this.getplant();
    this.getcrdata();
    this.getcategorytype();
    this.getreference();
    this.getreferencetype();
    this.getinitator();

    /*this.filterProjectTypes()*/
    this.getpriority();
  }

  toggleInitiatorFields() {
    this.showInitiator = !this.showInitiator;
  }

  toggleField() {
    this.showRiskQ = !this.showRiskQ;
  }

  isPopupVisible = false;

  togglePopup() {
    this.isPopupVisible = !this.isPopupVisible;
  }
  // g*p classification
  plantData: any[] = []; // Assuming you want to store multiple plant data entries

  addMore() {
    this.plantData.push({
      selectPlant: '',
      controlNumber: '',
      controlDate: '',
      attachment: null
    });
  }

  update(index: number) {
    // Implement the update logic here
  }

  delete(index: number) {
    this.plantData.splice(index, 1);
  }

  handleFileInput(event: any, index: number) {
    // Assuming you want to handle file input for a specific row
    const file = event.target.files[0];
    this.plantData[index].attachment = file;
  }

  supportId: any = '';
  classificationId: any = '';
  categoryId: any = '';
  crowner: any = '';
  crdate: any = '';
  changerequestedby: any = '';
  referenceid: any = '';
  referencetype: any = '';
  crinitiatedFor: any = '';
  changeType: any = '';
  natureOfChange: any = '';
  priorityType: any = '';
  plantId: any = '';
  gxpclassification: any = '';
  changeControlNo: any = '';
  changeControlDt: any = '';
  changeControlAttach: any = '';
  changeDesc: any = '';
  reasonForChange: any = '';
  alternateConsidetation: any = '';
  impactNotDoing: any = '';
  triggeredBy: any = '';
  benefits: any = '';
  estimatedCost: any = '';
  estimatedCostCurr: any = '';
  estimatedEffort: any = '';
  estimatedEffortUnit: any = '';
  estimatedDateCompletion: any = '';
  rollbackPlan: any = '';
  backoutPlan: any = '';
  downTimeRequired: any = '';
  downTimeFromDate: any = '';
  downTimeToDate: any = '';
  approvedBy: any = '';
  approvedDt: any = '';
  createdBy: any = '';
  createdDt: any = '';
  modifiedBy: any = '';
  modifiedDt: any = '';
  selectedCategory: any = '';
  categoryTypeId: any = '';
  reftype: any[] = [];

  supportteam: any[] = [];
  getsuppotteam() {
    const apiUrls = this.apiurl + '/SupportTeam'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        console.log("Supportteam", response);
        this.supportteam = response;
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  errorMessage: any = '';
  successMessage:any='';

  
  submitApprove() {
    if (this.crinitiatedFor == "") {
      this.errorMessage = 'Enter Initiator';
      window.scrollTo({ top: 0, behavior: 'smooth' });
      const inputElement = document.querySelector<HTMLInputElement>('input[ngModel="crinitiatedFor"]');
      if (inputElement) {
        inputElement.focus();
      }
    }
    else if (this.plantId == "") {
      this.errorMessage = 'Select Plant';
      window.scrollTo({ top: 0, behavior: 'smooth' });
      const selectElement = document.querySelector<HTMLSelectElement>('select[ngModel="plantId"]');
      if (selectElement) {
        selectElement.focus();
      }
    }
    else if (this.classificationId == "") {
      this.errorMessage = 'Select Classifcation';
      window.scrollTo({ top: 0, behavior: 'smooth' });
      const selectElement = document.querySelector<HTMLSelectElement>('select[ngModel="classificationId"]');
      if (selectElement) {
        selectElement.focus();
      }
    }
    else if (this.selectedCategory == "") {
      this.errorMessage = 'Select Category';
      window.scrollTo({ top: 0, behavior: 'smooth' });
      const selectElement = document.querySelector<HTMLSelectElement>('select[ngModel="selectedCategory"]');
      if (selectElement) {
        selectElement.focus();
      }
    }
    else if (this.categoryTypeId == "") {
      this.errorMessage = 'Select Category Type';
      window.scrollTo({ top: 0, behavior: 'smooth' });
      const selectElement = document.querySelector<HTMLSelectElement>('select[ngModel="categoryTypeId"]');
      if (selectElement) {
        selectElement.focus();
      }
    }
    else if (this.natureOfChange == "") {
      this.errorMessage = 'Select Nature Of Change';
      window.scrollTo({ top: 0, behavior: 'smooth' });
      const selectElement = document.querySelector<HTMLSelectElement>('select[ngModel="natureOfChange"]');
      if (selectElement) {
        selectElement.focus();
      }
    }
    else if (this.priorityType == "") {
      this.errorMessage = 'Select priority Type';
      window.scrollTo({ top: 0, behavior: 'smooth' });
      const selectElement = document.querySelector<HTMLSelectElement>('select[ngModel="priorityType"]');
      if (selectElement) {
        selectElement.focus();
      }
    }
    else if (this.triggeredBy == "") {
      this.errorMessage = 'Select Change triggeredBy';
      window.scrollTo({ top: 0, behavior: 'smooth' });
      const selectElement = document.querySelector<HTMLSelectElement>('select[ngModel="triggeredBy"]');
      if (selectElement) {
        selectElement.focus();
      }
    }
    else if (this.changeDesc == "") {
      this.errorMessage = 'Enter Change Description ';
      window.scrollTo({ top: 0, behavior: 'smooth' });
      const inputElement = document.querySelector<HTMLInputElement>('input[ngModel="changeDesc"]');
      if (inputElement) {
        inputElement.focus();
      }
    }
    else if (this.reasonForChange == "") {
      this.errorMessage = 'Enter reason For Change ';
      window.scrollTo({ top: 0, behavior: 'smooth' });
      const inputElement = document.querySelector<HTMLInputElement>('input[ngModel="reasonForChange"]');
      if (inputElement) {
        inputElement.focus();
      }
    }
    else if (this.alternateConsidetation == "") {
      this.errorMessage = 'Enter alternate Considetation ';
      window.scrollTo({ top: 0, behavior: 'smooth' });
      const inputElement = document.querySelector<HTMLInputElement>('input[ngModel="alternateConsidetation"]');
      if (inputElement) {
        inputElement.focus();
      }
    }
    else if (this.benefits == "") {
      this.errorMessage = 'Enter benefits ';
      window.scrollTo({ top: 0, behavior: 'smooth' });
      const inputElement = document.querySelector<HTMLInputElement>('input[ngModel="benefits"]');
      if (inputElement) {
        inputElement.focus();
      }
    }
    else if (this.rollbackPlan == "") {
      this.errorMessage = 'Enter Roll Back Plan ';
      window.scrollTo({ top: 0, behavior: 'smooth' });
      const inputElement = document.querySelector<HTMLInputElement>('input[ngModel="rollbackPlan"]');
      if (inputElement) {
        inputElement.focus();
      }
    }
    else if (this.backoutPlan == "") {
      this.errorMessage = 'Enter BackoutPlan ';
      window.scrollTo({ top: 0, behavior: 'smooth' });
      const inputElement = document.querySelector<HTMLInputElement>('input[ngModel="backoutPlan"]');
      if (inputElement) {
        inputElement.focus();
      }
    }
    else if (this.estimatedCost == "") {
      this.errorMessage = 'Enter Estimated Cost ';
      window.scrollTo({ top: 0, behavior: 'smooth' });
      const inputElement = document.querySelector<HTMLInputElement>('input[ngModel="estimatedCost"]');
      if (inputElement) {
        inputElement.focus();
      }
    }
    else if (this.estimatedCostCurr == "") {
      this.errorMessage = 'Enter Estimated Currency ';
      window.scrollTo({ top: 0, behavior: 'smooth' });
      const inputElement = document.querySelector<HTMLInputElement>('input[ngModel="estimatedCostCurr"]');
      if (inputElement) {
        inputElement.focus();
      }
    }
    else if (this.estimatedEffort == "") {
      this.errorMessage = 'Enter Estimated Effort ';
      window.scrollTo({ top: 0, behavior: 'smooth' });
      const inputElement = document.querySelector<HTMLInputElement>('input[ngModel="estimatedEffort"]');
      if (inputElement) {
        inputElement.focus();
      }
    }
    else if (this.estimatedEffortUnit == "") {
      this.errorMessage = 'Enter Eestimated Effort Unit ';
      window.scrollTo({ top: 0, behavior: 'smooth' });
      const inputElement = document.querySelector<HTMLInputElement>('input[ngModel="estimatedEffortUnit"]');
      if (inputElement) {
        inputElement.focus();
      }
    }
    else if (this.changeControlNo == "") {
      this.errorMessage = 'Enter change Control No ';
      window.scrollTo({ top: 0, behavior: 'smooth' });
      const inputElement = document.querySelector<HTMLInputElement>('input[ngModel="changeControlNo"]');
      if (inputElement) {
        inputElement.focus();
      }
    }
    else if (this.changeControlDt == "") {
      this.errorMessage = 'Select change Control Dt ';
      window.scrollTo({ top: 0, behavior: 'smooth' });
      const selectElement = document.querySelector<HTMLSelectElement>('input[ngModel="changeControlDt"]');
      if (selectElement) {
        selectElement.focus();
      }
    }
    else {
      
      const apiUrl = this.apiurl + "/ChangeRequest/InsertChangeRequest";
      const requestBody = {
        "type": "I",
        "itcrid": 0,
        "supportId": 1,
        "classifcationId": this.classificationId,
        "categoryId": this.selectedCategory,
        "categoryTypeId": this.categoryTypeId,
        "crowner": this.supportid,
        "crdate": this.crdate,
        "crrequestedBy": this.changerequestedby,
        "crinitiatedFor": this.supportid,
        "status": "New",
        "referenceId": this.referenceid,
        "referenceTyp": this.referencetype,
        "natureOfChange": this.natureOfChange,
        "priorityType": this.priorityType,
        "plantId": this.plantId,
        "gxpclassification": true,
        "changeControlNo": this.changeControlNo,
        "changeControlDt": this.changeControlDt,
        "changeControlAttach": true,
        "changeDesc": this.changeDesc,
        "reasonForChange": this.reasonForChange,
        "alternateConsidetation": this.alternateConsidetation,
        "impactNotDoing": this.impactNotDoing,
        "triggeredBy": this.triggeredBy,
        "benefits": this.benefits,
        "estimatedCost": this.estimatedCost,
        "estimatedCostCurr": this.estimatedCostCurr,
        "estimatedEffort": this.estimatedEffort,
        "estimatedEffortUnit": this.estimatedEffortUnit,
        "estimatedDateCompletion": this.estimatedDateCompletion,
        "rollbackPlan": this.rollbackPlan,
        "backoutPlan": this.backoutPlan,
        "downTimeRequired": true,
        "downTimeFromDate": this.downTimeFromDate,
        "downTimeToDate": this.downTimeToDate,
        "isSubmitted": false,
        "isApproved": false,
        "isImplemented": false,
        "isReleased": false,
        "createdBy": this.supportid
      }

      const httpOptions = {
        headers: new HttpHeaders({
          'Content-Type': 'application/json'
        })
      };
      this.http.post(apiUrl, requestBody, httpOptions).subscribe(
        (response: any) => {
          console.log(response);
          this.successMessage = 'Saved Successfully!';
        },
        (error: any) => {
          console.log('Post request failed', error);
        }
      );
      this.route.navigate(['/change-request']);
    }
  }

  // successmessage:any='';
  // successMessage(){
  //   this.successmessage = 'Save Successfully!';
  //   setTimeout(()=>{
  //     this.successmessage = '';
  //   },1000);   
  // }
  

  clearErrorMessage() {
    this.errorMessage = '';
  }

  categorydata: any[] = [];

  getcategory() {
    const apiUrls = this.apiurl + '/Category'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        console.log(response);
        this.categorydata = response;
        console.log(this.categorydata)
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  getpriority() {
    const apiUrls = this.apiurl + '/Priority'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        console.log(response);
        this.priorityType = response;
        console.log("Priority", this.priorityType)
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }


  Natureofchange: any[] = [];

  getnature() {
    debugger
    const apiUrls = this.apiurl + '/NatureofChange'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        console.log(response);
        this.Natureofchange = response;
        console.log(this.Natureofchange)
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  classifications: any[] = [];

  getclassification() {
    debugger
    const apiUrls = this.apiurl + '/Classification'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        console.log(response);
        this.classifications = response;
        console.log(this.classifications)
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  plantcode: any[] = [];

  getplant() {
    debugger
    const apiUrls = this.apiurl + '/Plantid'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        console.log(response);
        this.plantcode = response;
        console.log(this.plantcode)
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  changerequest: any[] = [];

  getcrdata() {
    debugger
    const apiUrls = this.apiurl + '/ChangeRequest/Getrequest'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        console.log(response);
        this.changerequest = response;
        console.log(this.changerequest)
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }


  systemlandscape: any[] = [];

  getsystemlandscape() {
    debugger
    const apiUrls = '/SystemLandscape'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        console.log(response);
        this.systemlandscape = response;
        console.log(this.systemlandscape)
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  categorytype: any[] = [];

  getcategorytype() {
    debugger
    const apiUrls = this.apiurl + '/CategoryTyp'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        console.log(response);
        this.categorytype = response;
        console.log(this.categorytype)
      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  referenceapi: any[] = [];
  refer: any[] = [];
  getreference() {
    debugger
    const apiUrls = this.apiurl + '/Reference'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {

        this.refer = response;

      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  referencedrop: any[] = [];

  getreferencetype() {
    debugger
    const apiUrls = this.apiurl + '/ReferenceType'
    const requestBody = {

    }
    const httpOptions = {
      headers: new HttpHeaders({
        'content-Type': 'application/json'
      })
    };
    this.http.get(apiUrls, requestBody).subscribe(
      (response: any) => {
        console.log(response);
        this.reftype = response;

      },
      (error) => {
        console.error("Post failed", error)
      }
    )
  }

  sameinitator: boolean = false;
  getinitator() {
    if (this.sameinitator == true) {
      this.crinitiatedFor = this.supportid
    }
  }


}

